# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

before_all do
  setup_circle_ci
  update_fastlane
end

desc "Increment build number and update changelog"
lane :bump_and_update_changelog do |options|
  new_version_number = options[:version]
  previous_version_number = current_version_number
  sh "fastlane ios bump version:#{new_version_number}"
  sh "fastlane android bump version:#{new_version_number}"
  attach_changelog_to_main(options)
  increment_version_in(previous_version_number, new_version_number, "../.version")
end

platform :ios do
  desc "Increment build number"
  lane :bump do |options|
    new_version_number = options[:version]
    fail ArgumentError, "missing version" unless new_version_number
    previous_version_number = get_version_number(xcodeproj: "ios/PurchasesHybridCommon/PurchasesHybridCommon.xcodeproj")
    increment_version_number(version_number: new_version_number, xcodeproj: "ios/PurchasesHybridCommon/PurchasesHybridCommon.xcodeproj")
    version_bump_podspec(path: "PurchasesHybridCommon.podspec", version_number: new_version_number)
  end
  
  desc "Release to CocoaPods, create Carthage archive, and create GitHub release"
  lane :release do |options|
    version_number = current_version_number
    push_pods
    carthage_archive
    github_release(version: version_number)
  end

  desc "Make github release"
  lane :github_release do |options|
    release_version = options[:version]
    fail ArgumentError, "missing version" unless release_version

    begin
      changelog = File.read("../CHANGELOG.latest.md")
    rescue
      fail "please add a CHANGELOG.latest.md file before calling this lane"
    end
    commit_hash = last_git_commit[:commit_hash]
    puts commit_hash

    is_prerelease = release_version.include?("-")

    set_github_release(
      repository_name: "revenuecat/purchases-hybrid-common",
      api_token: ENV["GITHUB_TOKEN"],
      name: release_version,
      tag_name: "#{release_version}",
      description: changelog,
      commitish: commit_hash,
      upload_assets: ["PurchasesHybridCommon.framework.zip"],
      is_draft: false,
      is_prerelease: true
  )
  end
end

platform :android do
  desc "Increment build number"
  lane :bump do |options|
    new_version = options[:version]
    fail ArgumentError, "missing version" unless new_version
    gradle_file_path = "android/build.gradle"
    previous_version = android_get_version_name(gradle_file: gradle_file_path)
    android_set_version_name(version_name: new_version, gradle_file: gradle_file_path)
    increment_version_in(previous_version, new_version, '../android/gradle.properties')
  end
end

def attach_changelog_to_main(options)
  version_number = options[:version]
  current_changelog = File.open("../CHANGELOG.latest.md", 'r')
  master_changelog = File.open("../CHANGELOG.md", 'r')

  current_changelog_data = current_changelog.read
  master_changelog_data = master_changelog.read

  current_changelog.close
  master_changelog.close

  File.open("../CHANGELOG.md", 'w') { |master_changelog_write_mode|
    version_header = "## #{version_number}"
    whole_file_data = "#{version_header}\n\n#{current_changelog_data}\n#{master_changelog_data}"
    puts "going to save. Contents - #{whole_file_data}"
    master_changelog_write_mode.write(whole_file_data)
  }
end

def increment_version_in(previous_version, new_version, path)
  sed_regex = 's|' + previous_version + '|' + new_version + '|'
  backup_extension = '.bck'
  sh("sed", '-i', backup_extension, sed_regex, path)
end

def current_version_number
  File.read("../.version")
end

def push_pods
  pod_push(path: "PurchasesHybridCommon.podspec", synchronous: true)
end

def carthage_archive
  Dir.chdir("..") do
    # As of Carthage 0.38.0, we still can't archive xcframeworks directly. 
    # there are also some issues which prevent us from archiving frameworks directly, since
    # carthage can't deal with architectures for simulators and for Apple Silicon correctly.
    # We use this script as a workaround until this is fixed. 
    # https://github.com/Carthage/Carthage/releases/0.38.0
    sh("./carthage.sh", "build", "--archive", "--platform", "iOS")
  end
end

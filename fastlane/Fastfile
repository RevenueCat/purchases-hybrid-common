# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

files_with_version_number = [
  './.version',
  './PurchasesHybridCommon.podspec',
  './android/build.gradle',
  './android/gradle.properties'
]
files_with_version_number_without_prerelease_modifiers = [
  './ios/PurchasesHybridCommon/Info.plist',
  './ios/PurchasesHybridCommon/PurchasesHybridCommonTests/Info.plist'
]
repo_name = 'purchases-hybrid-common'
changelog_latest_path = './CHANGELOG.latest.md'
changelog_path = './CHANGELOG.md'

before_all do
  setup_circle_ci
  update_fastlane
end

desc "Bump version, edit changelog, and create pull request"
lane :bump do |options|
  bump_version_update_changelog_create_pr(
    current_version: current_version_number,
    changelog_latest_path: changelog_latest_path,
    changelog_path: changelog_path,
    files_to_update: files_with_version_number,
    files_to_update_without_prerelease_modifiers: files_with_version_number_without_prerelease_modifiers,
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit],
    editor: options[:editor],
    next_version: options[:next_version],
    automatic_release: options[:automatic_release]
  )
end

desc "Automatically bumps version, edit changelog, and create pull request"
lane :automatic_bump do |options|
  next_version, type_of_bump = determine_next_version_using_labels(
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit]
  )
  options[:next_version] = next_version
  options[:automatic_release] = true
  if type_of_bump == :skip
    UI.message('Skipping automatic bump since the next version doesn\'t include public facing changes')
    next
  end
  if type_of_bump == :major
    UI.message('Skipping automatic bump since the next version is a major release')
    next
  end
  bump(options)
end

desc "Make GitHub release for current version"
lane :github_release_current do |options|
  version_number = current_version_number
  github_release(version: version_number)
end

desc "Make GitHub release for specific version"
lane :github_release do |options|
  create_github_release(
    version: options[:version],
    repo_name: repo_name,
    github_api_token: ENV["GITHUB_TOKEN"],
    changelog_latest_path: changelog_latest_path
  )
end

desc "Update dependencies to latest GitHub releases and opens a PR"
lane :open_pr_upgrading_dependencies do |options|
  ensure_git_status_clean

  dry_run = options[:dry_run]

  current_ios_version = parse_previous_ios_native_version
  current_android_version = parse_previous_android_native_version

  new_versions = update_native_dependencies_to_latest
  new_ios_version = new_versions[:new_ios_version]
  new_android_version = new_versions[:new_android_version]

  type_of_bump_ios = detect_bump_type(current_ios_version, new_ios_version)
  type_of_bump_android = detect_bump_type(current_android_version, new_android_version)

  repo_status = sh("git status --porcelain")

  repo_clean = repo_status.empty?

  if repo_clean
    UI.success('Git status is clean, nothing to update! 💪')
    next
  end


  if dry_run
    UI.message("ℹ️  Nothing more to do since dry_run: true.")
    if type_of_bump_ios != :none
      UI.message("ℹ️  New iOS dependency version is #{new_ios_version}")
     end
    if type_of_bump_android != :none
      UI.message("ℹ️  New Android dependency version is #{new_android_version}")
     end
    reset_git_repo
  else
    branch_ios = ""
    branch_android = ""
    message_ios = ""
    message_android = ""

    if type_of_bump_ios != :none
      branch_ios = "-ios-#{new_ios_version}"
      message_ios = "iOS #{current_ios_version} => #{new_ios_version} "
    end
    if type_of_bump_android != :none
      branch_android = "-android-#{new_android_version}"
      message_android = "Android #{current_android_version} => #{new_android_version} "
    end

    branch = "update#{branch_ios}#{branch_android}"

    sh("git stash")
    sh("git checkout -b #{branch} origin/main")
    sh("git stash pop")

    UI.success("Git switched to branch `#{branch}, all good! 💪")

    sh("git commit -am \"Upgrades versions\"")

    push_to_git_remote(
      set_upstream: true,
      remote_branch: branch
    )

    message = "[AUTOMATIC] #{message_ios}#{message_android}".strip

    labels = ["dependencies"]
    if type_of_bump_ios == :minor || type_of_bump_android == :minor
      labels << "minor"
    end

    create_pull_request(
      api_token: ENV["GITHUB_TOKEN"],
      repo: "RevenueCat/#{repo_name}",
      title: message,
      head: "#{branch}",
      base: "main",
      body: message,
      labels: labels
    )
  end
end

desc "Update dependencies to latest GitHub releases"
lane :update_native_dependencies_to_latest do |options|
  current_ios_version = parse_previous_ios_native_version
  latest_ios_release = get_latest_github_release_within_same_major(repo_name: "purchases-ios", current_version: current_ios_version)

  current_android_version = parse_previous_android_native_version
  latest_android_release = get_latest_github_release_within_same_major(repo_name: "purchases-android", current_version: current_android_version)

  update_ios_native_version(new_version: latest_ios_release, current_version: current_ios_version)
  update_android_native_version(new_version: latest_android_release, current_version: current_android_version)

  run_pod_install

  new_versions = {
    new_ios_version: latest_ios_release,
    new_android_version: latest_android_release
  }
  new_versions
end

desc "Tag current branch with current version number"
lane :tag_current_branch do |options|
  version_number = current_version_number
  check_no_git_tag_exists(version_number)

  add_git_tag(tag: version_number)
  push_git_tags(tag: version_number)
end

desc "Update purchases-ios dependency version"
private_lane :update_ios_native_version do |options|
  new_version_number = options[:new_version]
  previous_version_number = options[:current_version]
  files_to_update = [
    'PurchasesHybridCommon.podspec',
    'ios/PurchasesHybridCommon/Podfile',
    'DEVELOPMENT.md'
  ]

  update_native_version(
    platform_name: "iOS",
    new_version_number: new_version_number,
    previous_version_number: previous_version_number,
    files_to_update: files_to_update
  )
end

desc "Update purchases-android dependency version"
private_lane :update_android_native_version do |options|
  new_version_number = options[:new_version]
  previous_version_number = options[:current_version]
  files_to_update = [
    'android/build.gradle'
  ]

  update_native_version(
    platform_name: "Android",
    new_version_number: new_version_number,
    previous_version_number: previous_version_number,
    files_to_update: files_to_update
  )
end

desc "Update purchases-android dependency version"
private_lane :update_native_version do |options|
  platform_name = options[:platform_name]

  dry_run = options[:dry_run]
  if options[:new_version_number]
    new_version_number = options[:new_version_number]
  else
    UI.user_error!("Missing `version` argument")
  end

  previous_version_number = options[:previous_version_number]

  if previous_version_number == new_version_number
    UI.message("ℹ️  #{platform_name} is already in its latest version: #{previous_version_number}")
    next previous_version_number
  end

  UI.message("ℹ️  Updating #{platform_name} from #{previous_version_number} to #{new_version_number}")
  files_to_update = options[:files_to_update]

  if dry_run
    UI.message("ℹ️  Nothing more to do, dry_run: true")
  else
    replace_text_in_files(
      previous_text: previous_version_number,
      new_text: new_version_number,
      paths_of_files_to_update: files_to_update
    )
  end
  new_version_number
end

desc "Run pod install"
lane :run_pod_install do |options|
  Dir.chdir(File.expand_path('ios/PurchasesHybridCommon', get_root_folder)) do
    sh("pod install --repo-update")
  end
end

desc "Run automatic bump in other repos"
lane :bump_hybrid_dependencies do |options|
  version_number_for_bump = current_version_number
  repo_name = options[:repo_name]

  UI.message("Triggering pipeline to bump #{repo_name} dependency to #{version_number_for_bump}")

  require 'net/http'
  require 'uri'
  require 'json'

  uri = URI.parse("https://circleci.com/api/v2/project/github/RevenueCat/#{repo_name}/pipeline")
  request = Net::HTTP::Post.new(uri)
  request.basic_auth(ENV['CIRCLECI_TOKEN'], "")
  request.content_type = "application/json"
  request.body = JSON.dump({
    "branch" => "main",
    "parameters" => {
      "action" => "upgrade-hybrid-common",
      "version" => "#{version_number_for_bump}",
      "automatic" => true
    }
  })

  req_options = {
    use_ssl: uri.scheme == "https",
  }

  response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
    http.request(request)
  end

  if response.code != "201"
    error_body = JSON.parse(response.body)
    error_message = error_body["message"]
    UI.error("Error triggering the pipeline.")
    UI.error("Response code: #{response.code}")
    UI.error("Error message: #{error_message}")
  end
end

platform :ios do
  desc "Release to CocoaPods, and create GitHub release"
  lane :release do |options|
    version_number = current_version_number
    push_pods
  end

  desc "replace API KEY for integration tests"
  lane :replace_api_key_integration_tests do
    folder = './ios/PurchasesHybridCommon/PurchasesHybridCommonIntegrationTests/'

    replace_text_in_files(
      previous_text: "REVENUECAT_API_KEY",
      new_text: ENV["REVENUECAT_API_KEY"],
      paths_of_files_to_update: ["#{folder}/Constants.swift"]
    )
    replace_text_in_files(
      previous_text: "REVENUECAT_PROXY_URL",
      new_text: ENV["REVENUECAT_PROXY_URL"].to_s,
      paths_of_files_to_update: ["#{folder}/Constants.swift"],
      allow_empty: true
    )
  end
end

platform :android do
  desc "Upload and close a release"
  lane :deploy do |options|
    gradle_file_path = "android/build.gradle"
    version = current_version_number
    gradleProperties = {
      "signing.keyId" => ENV['GPG_SIGNING_KEY_ID'],
      "signing.password" => ENV['GPG_SIGNING_KEY_PW'],
      "signing.secretKeyRingFile" => "./secring.gpg",
      "mavenCentralUsername" => ENV['SONATYPE_NEXUS_TOKEN_USERNAME'],
      "mavenCentralPassword" => ENV['SONATYPE_NEXUS_TOKEN_PASSWORD'],
      "RELEASE_SIGNING_ENABLED" => true
    }
    UI.verbose("Deploying #{version}")

    gradle(
      tasks: [
        "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties,
      project_dir: 'android'
    )

    UI.verbose("Creating special version for Unity IAP with BillingClient 3 and Amazon 2 for version: #{version}")
    gradleProperties["ANDROID_VARIANT_TO_PUBLISH"] = "unityIAPRelease"

    UI.verbose("Adding -unityiap to artifact ids")

    gradle(
      tasks: [
        "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties,
      project_dir: 'android'
    )
  end
end

def current_version_number
  File.read("../.version")
end

def push_pods
  pod_push(path: "PurchasesHybridCommon.podspec", synchronous: true)
end

def is_snapshot_version?(version_name)
  version_name.end_with?("-SNAPSHOT")
end

def parse_previous_android_native_version
  parse_version_in_file(/(?<=ext\.purchases_version = ["'])(.*)(?=["'])/, "android/build.gradle")
end

def parse_previous_ios_native_version
  parse_version_in_file(/(?<=s\.dependency ["']RevenueCat["'], ["'])(.*)(?=["'])/, "PurchasesHybridCommon.podspec")
end

def parse_version_in_file(pattern, path)
  Dir.chdir(get_root_folder) do
    File.open path do |file|
      line = file.find { |line| line =~ pattern }
      return line.match(pattern)[1] unless line.nil?
    end
  end
  UI.user_error!("Couldn't extract version from #{path}")
end

def get_root_folder
  File.expand_path('../../', __FILE__)
end

def check_no_git_tag_exists(version_number)
  if git_tag_exists(tag: version_number, remote: true, remote_name: 'origin')
    raise "git tag with version #{version_number} already exists!"
  end
end

def detect_bump_type(a, b)
  if a == b
    return :none
  end

  version_a = Gem::Version.new(a)
  version_b = Gem::Version.new(b)

  same_major = version_a.canonical_segments[0] == version_b.canonical_segments[0]
  same_minor = version_a.canonical_segments[1] == version_b.canonical_segments[1]
  if same_major && same_minor
    return :patch
  elsif same_major
    return :minor
  else
    return :major
  end
end
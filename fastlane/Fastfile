# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

files_with_version_number = [
  './.version',
  './PurchasesHybridCommon.podspec',
  './android/build.gradle',
  './android/gradle.properties'
]
files_with_version_number_without_prerelease_modifiers = [
  './ios/PurchasesHybridCommon/Info.plist',
  './ios/PurchasesHybridCommon/PurchasesHybridCommonTests/Info.plist'
]
repo_name = 'purchases-hybrid-common'
changelog_latest_path = './CHANGELOG.latest.md'
changelog_path = './CHANGELOG.md'

before_all do
  setup_circle_ci
  update_fastlane
end

desc "Bump version, update swift header, edit changelog, and create pull request"
lane :bump do |options|
  bump_version_update_changelog_create_pr(
    current_version: current_version_number,
    changelog_latest_path: changelog_latest_path,
    changelog_path: changelog_path,
    files_to_update: files_with_version_number,
    files_to_update_without_prerelease_modifiers: files_with_version_number_without_prerelease_modifiers,
    repo_name: repo_name,
    github_rate_limit: options[:github_rate_limit],
    branch: options[:branch],
    editor: options[:editor]
  )
end

desc "Make GitHub release for current version"
lane :github_release_current do |options|
  version_number = current_version_number
  github_release(version: version_number)
end

desc "Make GitHub release for specific version"
lane :github_release do |options|
  create_github_release(
    version: options[:version],
    repo_name: repo_name,
    github_api_token: ENV["GITHUB_TOKEN"],
    changelog_latest_path: changelog_latest_path,
    upload_assets: ["PurchasesHybridCommon.framework.zip"]
  )
end

platform :ios do
  desc "Release to CocoaPods, create Carthage archive, and create GitHub release"
  lane :release do |options|
    version_number = current_version_number
    push_pods
    archive
  end

  desc "replace API KEY for integration tests"
  lane :replace_api_key_integration_tests do
    folder = './ios/PurchasesHybridCommon/PurchasesHybridCommonIntegrationTests/'

    replace_text_in_files(
      previous_text: "REVENUECAT_API_KEY", 
      new_text: ENV["REVENUECAT_API_KEY"],
      paths_of_files_to_update: ["#{folder}/Constants.swift"]
    )
    replace_text_in_files(
      previous_text: "REVENUECAT_PROXY_URL", 
      new_text: ENV["REVENUECAT_PROXY_URL"].to_s,
      paths_of_files_to_update: ["#{folder}/Constants.swift"],
      allow_empty: true
    )
  end
end

platform :android do
  desc "Upload and close a release"
  lane :deploy do |options|
    gradle_file_path = "android/build.gradle"
    version = current_version_number
    gradleProperties = {
      "signing.keyId" => ENV['GPG_SIGNING_KEY_ID'],
      "signing.password" => ENV['GPG_SIGNING_KEY_PW'],
      "signing.secretKeyRingFile" => "./secring.gpg",
      "mavenCentralUsername" => ENV['SONATYPE_NEXUS_TOKEN_USERNAME'],
      "mavenCentralPassword" => ENV['SONATYPE_NEXUS_TOKEN_PASSWORD'],
      "RELEASE_SIGNING_ENABLED" => true
    }
    UI.verbose("Deploying #{version}")
    
    gradle(
      tasks: [
        "androidSourcesJar", "androidJavadocJar", "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties,
      project_dir: 'android'
    )

    UI.verbose("Creating special version for Unity IAP with BillingClient 3 and Amazon 2 for version: #{version}")
    gradleProperties["PUBLISH_VARIANT"] = "unityIAPRelease"
    
    UI.verbose("Adding -unityiap to artifact ids")

    gradle(
      tasks: [
        "androidSourcesJar", "androidJavadocJar", "publish --no-daemon --no-parallel"
      ],
      properties: gradleProperties,
      project_dir: 'android'
    )
    
    unless is_snapshot_version?(version)
      gradle(
        tasks: [
          "closeAndReleaseRepository"
        ],
        properties: gradleProperties,
        project_dir: 'android'
      )
    end
  end
end

def current_version_number
  File.read("../.version")
end

def push_pods
  pod_push(path: "PurchasesHybridCommon.podspec", synchronous: true)
end

def archive
  match(type: "appstore")
  framework_filename = "PurchasesHybridCommon.framework"
  build_app(
    workspace: "ios/PurchasesHybridCommon/PurchasesHybridCommon.xcworkspace",
    configuration: "Release",
    scheme: "PurchasesHybridCommon",
    silent: true,
    clean: true,
    derived_data_path: "derived_data/",
    output_name: framework_filename,
    destination: 'generic/platform=iOS',
    export_method: "app-store"
  )

  # fastlane gym doesn't fully support .frameworks, so we need to look for the output
  # in derived data manually. 
  Dir.chdir("..") do
    output_framework_path = Dir["derived_data/**/#{framework_filename}"].first
    UI.error("framework not found!") if output_framework_path.nil?

    # compress using ditto because zip can cause issues with symlinks
    sh("ditto", "-c", "-k", "--sequesterRsrc", "--keepParent", 
      output_framework_path, 
      "#{framework_filename}.zip")
  end

end

def is_snapshot_version?(version_name)
  version_name.end_with?("-SNAPSHOT")
end
